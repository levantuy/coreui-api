//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    User
// ObjectType:  User
// CSLAType:    EditableRoot

using System;
using Csla;
using CoreuiApi.Dto;

namespace CoreuiApi.Lib
{

    /// <summary>
    /// User (editable root object).<br/>
    /// This is a generated base class of <see cref="User"/> business object.
    /// </summary>
    [Serializable]
    public partial class User : BusinessBase<User>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="id"/> property.
        /// </summary>
        private static readonly PropertyInfo<Int64> IdProperty = RegisterProperty<Int64>(p => p.Id, "id");
        /// <summary>
        /// Gets the id.
        /// </summary>
        /// <value>The id.</value>
        public Int64 Id
        {
            get { return GetProperty(IdProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="user_name"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> User_nameProperty = RegisterProperty<string>(p => p.User_name, "user_name");
        /// <summary>
        /// Gets or sets the user_name.
        /// </summary>
        /// <value>The user_name.</value>
        public string User_name
        {
            get { return GetProperty(User_nameProperty); }
            set { SetProperty(User_nameProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="password"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> PasswordProperty = RegisterProperty<string>(p => p.Password, "password");
        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        /// <value>The password.</value>
        public string Password
        {
            get { return GetProperty(PasswordProperty); }
            set { SetProperty(PasswordProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="password_salt"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> Password_saltProperty = RegisterProperty<string>(p => p.Password_salt, "password_salt");
        /// <summary>
        /// Gets or sets the password_salt.
        /// </summary>
        /// <value>The password_salt.</value>
        public string Password_salt
        {
            get { return GetProperty(Password_saltProperty); }
            set { SetProperty(Password_saltProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="password_question"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> Password_questionProperty = RegisterProperty<string>(p => p.Password_question, "password_question");
        /// <summary>
        /// Gets or sets the password_question.
        /// </summary>
        /// <value>The password_question.</value>
        public string Password_question
        {
            get { return GetProperty(Password_questionProperty); }
            set { SetProperty(Password_questionProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="password_answer"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> Password_answerProperty = RegisterProperty<string>(p => p.Password_answer, "password_answer");
        /// <summary>
        /// Gets or sets the password_answer.
        /// </summary>
        /// <value>The password_answer.</value>
        public string Password_answer
        {
            get { return GetProperty(Password_answerProperty); }
            set { SetProperty(Password_answerProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="is_approved"/> property.
        /// </summary>
        private static readonly PropertyInfo<bool> Is_approvedProperty = RegisterProperty<bool>(p => p.Is_approved, "is_approved");
        /// <summary>
        /// Gets or sets the is_approved.
        /// </summary>
        /// <value><c>true</c> if is_approved; otherwise, <c>false</c>.</value>
        public bool Is_approved
        {
            get { return GetProperty(Is_approvedProperty); }
            set { SetProperty(Is_approvedProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="fullname"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> FullnameProperty = RegisterProperty<string>(p => p.Fullname, "fullname");
        /// <summary>
        /// Gets or sets the fullname.
        /// </summary>
        /// <value>The fullname.</value>
        public string Fullname
        {
            get { return GetProperty(FullnameProperty); }
            set { SetProperty(FullnameProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="email"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "email");
        /// <summary>
        /// Gets or sets the email.
        /// </summary>
        /// <value>The email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
            set { SetProperty(EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="tel"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> TelProperty = RegisterProperty<string>(p => p.Tel, "tel");
        /// <summary>
        /// Gets or sets the tel.
        /// </summary>
        /// <value>The tel.</value>
        public string Tel
        {
            get { return GetProperty(TelProperty); }
            set { SetProperty(TelProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="last_login_date"/> property.
        /// </summary>
        private static readonly PropertyInfo<SmartDate> Last_login_dateProperty = RegisterProperty<SmartDate>(p => p.Last_login_date, "last_login_date");
        /// <summary>
        /// Gets or sets the last_login_date.
        /// </summary>
        /// <value>The last_login_date.</value>
        public string Last_login_date
        {
            get { return GetPropertyConvert<SmartDate, String>(Last_login_dateProperty); }
            set { SetPropertyConvert<SmartDate, String>(Last_login_dateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="last_password_changed_date"/> property.
        /// </summary>
        private static readonly PropertyInfo<SmartDate> Last_password_changed_dateProperty = RegisterProperty<SmartDate>(p => p.Last_password_changed_date, "last_password_changed_date");
        /// <summary>
        /// Gets or sets the last_password_changed_date.
        /// </summary>
        /// <value>The last_password_changed_date.</value>
        public string Last_password_changed_date
        {
            get { return GetPropertyConvert<SmartDate, String>(Last_password_changed_dateProperty); }
            set { SetPropertyConvert<SmartDate, String>(Last_password_changed_dateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="last_lockout_date"/> property.
        /// </summary>
        private static readonly PropertyInfo<SmartDate> Last_lockout_dateProperty = RegisterProperty<SmartDate>(p => p.Last_lockout_date, "last_lockout_date");
        /// <summary>
        /// Gets or sets the last_lockout_date.
        /// </summary>
        /// <value>The last_lockout_date.</value>
        public string Last_lockout_date
        {
            get { return GetPropertyConvert<SmartDate, String>(Last_lockout_dateProperty); }
            set { SetPropertyConvert<SmartDate, String>(Last_lockout_dateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="failed_password_attempt_count"/> property.
        /// </summary>
        private static readonly PropertyInfo<Int64> Failed_password_attempt_countProperty = RegisterProperty<Int64>(p => p.Failed_password_attempt_count, "failed_password_attempt_count");
        /// <summary>
        /// Gets or sets the failed_password_attempt_count.
        /// </summary>
        /// <value>The failed_password_attempt_count.</value>
        public Int64 Failed_password_attempt_count
        {
            get { return GetProperty(Failed_password_attempt_countProperty); }
            set { SetProperty(Failed_password_attempt_countProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="failed_password_attempt_window_start"/> property.
        /// </summary>
        private static readonly PropertyInfo<SmartDate> Failed_password_attempt_window_startProperty = RegisterProperty<SmartDate>(p => p.Failed_password_attempt_window_start, "failed_password_attempt_window_start");
        /// <summary>
        /// Gets or sets the failed_password_attempt_window_start.
        /// </summary>
        /// <value>The failed_password_attempt_window_start.</value>
        public string Failed_password_attempt_window_start
        {
            get { return GetPropertyConvert<SmartDate, String>(Failed_password_attempt_window_startProperty); }
            set { SetPropertyConvert<SmartDate, String>(Failed_password_attempt_window_startProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="failed_password_answer_attempt_count"/> property.
        /// </summary>
        private static readonly PropertyInfo<Int64> Failed_password_answer_attempt_countProperty = RegisterProperty<Int64>(p => p.Failed_password_answer_attempt_count, "failed_password_answer_attempt_count");
        /// <summary>
        /// Gets or sets the failed_password_answer_attempt_count.
        /// </summary>
        /// <value>The failed_password_answer_attempt_count.</value>
        public Int64 Failed_password_answer_attempt_count
        {
            get { return GetProperty(Failed_password_answer_attempt_countProperty); }
            set { SetProperty(Failed_password_answer_attempt_countProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="failed_password_answer_attempt_window_start"/> property.
        /// </summary>
        private static readonly PropertyInfo<SmartDate> Failed_password_answer_attempt_window_startProperty = RegisterProperty<SmartDate>(p => p.Failed_password_answer_attempt_window_start, "failed_password_answer_attempt_window_start");
        /// <summary>
        /// Gets or sets the failed_password_answer_attempt_window_start.
        /// </summary>
        /// <value>The failed_password_answer_attempt_window_start.</value>
        public string Failed_password_answer_attempt_window_start
        {
            get { return GetPropertyConvert<SmartDate, String>(Failed_password_answer_attempt_window_startProperty); }
            set { SetPropertyConvert<SmartDate, String>(Failed_password_answer_attempt_window_startProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="birthday"/> property.
        /// </summary>
        private static readonly PropertyInfo<SmartDate> BirthdayProperty = RegisterProperty<SmartDate>(p => p.Birthday, "birthday");
        /// <summary>
        /// Gets or sets the birthday.
        /// </summary>
        /// <value>The birthday.</value>
        public string Birthday
        {
            get { return GetPropertyConvert<SmartDate, String>(BirthdayProperty); }
            set { SetPropertyConvert<SmartDate, String>(BirthdayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="address"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> AddressProperty = RegisterProperty<string>(p => p.Address, "address");
        /// <summary>
        /// Gets or sets the address.
        /// </summary>
        /// <value>The address.</value>
        public string Address
        {
            get { return GetProperty(AddressProperty); }
            set { SetProperty(AddressProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="website"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> WebsiteProperty = RegisterProperty<string>(p => p.Website, "website");
        /// <summary>
        /// Gets or sets the website.
        /// </summary>
        /// <value>The website.</value>
        public string Website
        {
            get { return GetProperty(WebsiteProperty); }
            set { SetProperty(WebsiteProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="avatar"/> property.
        /// </summary>
        private static readonly PropertyInfo<string> AvatarProperty = RegisterProperty<string>(p => p.Avatar, "avatar");
        /// <summary>
        /// Gets or sets the avatar.
        /// </summary>
        /// <value>The avatar.</value>
        public string Avatar
        {
            get { return GetProperty(AvatarProperty); }
            set { SetProperty(AvatarProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="is_lock"/> property.
        /// </summary>
        private static readonly PropertyInfo<bool> Is_lockProperty = RegisterProperty<bool>(p => p.Is_lock, "is_lock");
        /// <summary>
        /// Gets or sets the is_lock.
        /// </summary>
        /// <value><c>true</c> if is_lock; otherwise, <c>false</c>.</value>
        public bool Is_lock
        {
            get { return GetProperty(Is_lockProperty); }
            set { SetProperty(Is_lockProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="user_type"/> property.
        /// </summary>
        private static readonly PropertyInfo<Int64?> User_typeProperty = RegisterProperty<Int64?>(p => p.User_type, "user_type");
        /// <summary>
        /// Gets or sets the user_type.
        /// </summary>
        /// <value>The user_type.</value>
        public Int64? User_type
        {
            get { return GetProperty(User_typeProperty); }
            set { SetProperty(User_typeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="last_modified"/> property.
        /// </summary>
        private static readonly PropertyInfo<SmartDate> Last_modifiedProperty = RegisterProperty<SmartDate>(p => p.Last_modified, "last_modified");
        /// <summary>
        /// Gets or sets the last_modified.
        /// </summary>
        /// <value>The last_modified.</value>
        public string Last_modified
        {
            get { return GetPropertyConvert<SmartDate, String>(Last_modifiedProperty); }
            set { SetPropertyConvert<SmartDate, String>(Last_modifiedProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="last_user_id"/> property.
        /// </summary>
        private static readonly PropertyInfo<Int64> Last_user_idProperty = RegisterProperty<Int64>(p => p.Last_user_id, "last_user_id");
        /// <summary>
        /// Gets or sets the last_user_id.
        /// </summary>
        /// <value>The last_user_id.</value>
        public Int64 Last_user_id
        {
            get { return GetProperty(Last_user_idProperty); }
            set { SetProperty(Last_user_idProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="User"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="User"/> object.</returns>
        public static User NewUser()
        {
            return DataPortal.Create<User>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="User"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id parameter of the User to fetch.</param>
        /// <returns>A reference to the fetched <see cref="User"/> object.</returns>
        public static User GetUser(Int64 id)
        {
            return DataPortal.Fetch<User>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="User"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id of the User to delete.</param>
        public static void DeleteUser(Int64 id)
        {
            DataPortal.Delete<User>(id);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private User()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="User"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(Password_questionProperty, null);
            LoadProperty(Password_answerProperty, null);
            LoadProperty(TelProperty, null);
            LoadProperty(BirthdayProperty, null);
            LoadProperty(AddressProperty, null);
            LoadProperty(WebsiteProperty, null);
            LoadProperty(AvatarProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="User"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The id.</param>
        protected void DataPortal_Fetch(Int64 id)
        {
            var args = new DataPortalHookArgs(id);
            OnFetchPre(args);
            using (var dalManager = DalFactoryGetManager.GetManager())
            {
                var dal = dalManager.GetProvider<IUserDal>();
                var data = dal.Fetch(id);
                Fetch(data);
            }
            OnFetchPost(args);
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        /// <summary>
        /// Loads a <see cref="User"/> object from the given <see cref="UserDto"/>.
        /// </summary>
        /// <param name="data">The UserDto to use.</param>
        private void Fetch(UserDto data)
        {
            // Value properties
            LoadProperty(IdProperty, data.Id);
            LoadProperty(User_nameProperty, data.User_name);
            LoadProperty(PasswordProperty, data.Password);
            LoadProperty(Password_saltProperty, data.Password_salt);
            LoadProperty(Password_questionProperty, data.Password_question);
            LoadProperty(Password_answerProperty, data.Password_answer);
            LoadProperty(Is_approvedProperty, data.Is_approved);
            LoadProperty(FullnameProperty, data.Fullname);
            LoadProperty(EmailProperty, data.Email);
            LoadProperty(TelProperty, data.Tel);
            LoadProperty(Last_login_dateProperty, data.Last_login_date);
            LoadProperty(Last_password_changed_dateProperty, data.Last_password_changed_date);
            LoadProperty(Last_lockout_dateProperty, data.Last_lockout_date);
            LoadProperty(Failed_password_attempt_countProperty, data.Failed_password_attempt_count);
            LoadProperty(Failed_password_attempt_window_startProperty, data.Failed_password_attempt_window_start);
            LoadProperty(Failed_password_answer_attempt_countProperty, data.Failed_password_answer_attempt_count);
            LoadProperty(Failed_password_answer_attempt_window_startProperty, data.Failed_password_answer_attempt_window_start);
            LoadProperty(BirthdayProperty, data.Birthday);
            LoadProperty(AddressProperty, data.Address);
            LoadProperty(WebsiteProperty, data.Website);
            LoadProperty(AvatarProperty, data.Avatar);
            LoadProperty(Is_lockProperty, data.Is_lock);
            LoadProperty(User_typeProperty, data.User_type);
            LoadProperty(Last_modifiedProperty, data.Last_modified);
            LoadProperty(Last_user_idProperty, data.Last_user_id);
            var args = new DataPortalHookArgs(data);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="User"/> object in the database.
        /// </summary>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Insert()
        {
            var dto = new UserDto();
            dto.User_name = User_name;
            dto.Password = Password;
            dto.Password_salt = Password_salt;
            dto.Password_question = Password_question;
            dto.Password_answer = Password_answer;
            dto.Is_approved = Is_approved;
            dto.Fullname = Fullname;
            dto.Email = Email;
            dto.Tel = Tel;
            dto.Last_login_date = ReadProperty(Last_login_dateProperty);
            dto.Last_password_changed_date = ReadProperty(Last_password_changed_dateProperty);
            dto.Last_lockout_date = ReadProperty(Last_lockout_dateProperty);
            dto.Failed_password_attempt_count = Failed_password_attempt_count;
            dto.Failed_password_attempt_window_start = ReadProperty(Failed_password_attempt_window_startProperty);
            dto.Failed_password_answer_attempt_count = Failed_password_answer_attempt_count;
            dto.Failed_password_answer_attempt_window_start = ReadProperty(Failed_password_answer_attempt_window_startProperty);
            dto.Birthday = ReadProperty(BirthdayProperty);
            dto.Address = Address;
            dto.Website = Website;
            dto.Avatar = Avatar;
            dto.Is_lock = Is_lock;
            dto.User_type = User_type;
            dto.Last_modified = ReadProperty(Last_modifiedProperty);
            dto.Last_user_id = Last_user_id;
            using (var dalManager = DalFactoryGetManager.GetManager())
            {
                var args = new DataPortalHookArgs(dto);
                OnInsertPre(args);
                var dal = dalManager.GetProvider<IUserDal>();
                using (BypassPropertyChecks)
                {
                    var resultDto = dal.Insert(dto);
                    LoadProperty(IdProperty, resultDto.Id);
                    args = new DataPortalHookArgs(resultDto);
                }
                OnInsertPost(args);
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="User"/> object.
        /// </summary>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_Update()
        {
            var dto = new UserDto();
            dto.Id = Id;
            dto.User_name = User_name;
            dto.Password = Password;
            dto.Password_salt = Password_salt;
            dto.Password_question = Password_question;
            dto.Password_answer = Password_answer;
            dto.Is_approved = Is_approved;
            dto.Fullname = Fullname;
            dto.Email = Email;
            dto.Tel = Tel;
            dto.Last_login_date = ReadProperty(Last_login_dateProperty);
            dto.Last_password_changed_date = ReadProperty(Last_password_changed_dateProperty);
            dto.Last_lockout_date = ReadProperty(Last_lockout_dateProperty);
            dto.Failed_password_attempt_count = Failed_password_attempt_count;
            dto.Failed_password_attempt_window_start = ReadProperty(Failed_password_attempt_window_startProperty);
            dto.Failed_password_answer_attempt_count = Failed_password_answer_attempt_count;
            dto.Failed_password_answer_attempt_window_start = ReadProperty(Failed_password_answer_attempt_window_startProperty);
            dto.Birthday = ReadProperty(BirthdayProperty);
            dto.Address = Address;
            dto.Website = Website;
            dto.Avatar = Avatar;
            dto.Is_lock = Is_lock;
            dto.User_type = User_type;
            dto.Last_modified = ReadProperty(Last_modifiedProperty);
            dto.Last_user_id = Last_user_id;
            using (var dalManager = DalFactoryGetManager.GetManager())
            {
                var args = new DataPortalHookArgs(dto);
                OnUpdatePre(args);
                var dal = dalManager.GetProvider<IUserDal>();
                using (BypassPropertyChecks)
                {
                    var resultDto = dal.Update(dto);
                    args = new DataPortalHookArgs(resultDto);
                }
                OnUpdatePost(args);
            }
        }

        /// <summary>
        /// Self deletes the <see cref="User"/> object.
        /// </summary>
        [Transactional(TransactionalTypes.TransactionScope)]
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(Id);
        }

        /// <summary>
        /// Deletes the <see cref="User"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        [Transactional(TransactionalTypes.TransactionScope)]
        private void DataPortal_Delete(Int64 id)
        {
            using (var dalManager = DalFactoryGetManager.GetManager())
            {
                var args = new DataPortalHookArgs();
                OnDeletePre(args);
                var dal = dalManager.GetProvider<IUserDal>();
                using (BypassPropertyChecks)
                {
                    dal.Delete(id);
                }
                OnDeletePost(args);
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
