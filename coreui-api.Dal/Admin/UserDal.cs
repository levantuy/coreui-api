//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    UserDal
// ObjectType:  SQL Server implementation of IUserDal (User)
// CSLAType:    EditableRoot

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using CoreuiApi.Dto;
using CoreuiApi.Util;

namespace CoreuiApi.Dal
{
    /// <summary>
    /// DAL SQL Server implementation of <see cref="IUserDal"/>
    /// </summary>
    public partial class UserDal : IUserDal
    {
        /// <summary>
        /// Loads a User object from the database.
        /// </summary>
        /// <param name="id">The fetch criteria.</param>
        /// <returns>A UserDto object.</returns>
        public UserDto Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.User_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int64;
                    var dr = cmd.ExecuteReader();
                    return Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a User object from the database.
        /// </summary>
        /// <param name="id">The fetch criteria.</param>
        /// <returns>A UserDto object.</returns>
        public UserDto Fetch(string user_name)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.User_by_user_name", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@user_name", user_name).DbType = DbType.String;
                    var dr = cmd.ExecuteReader();
                    return Fetch(dr);
                }
            }
        }

        private UserDto Fetch(IDataReader data)
        {
            var user = new UserDto();
            using (var dr = new SafeDataReader(data))
            {
                if (dr.Read())
                {
                    user.Id = dr.GetInt64("id");
                    user.User_name = dr.GetString("user_name");
                    user.Password = dr.GetString("password");
                    user.Password_salt = dr.GetString("password_salt");
                    user.Password_question = !dr.IsDBNull("password_question") ? dr.GetString("password_question") : null;
                    user.Password_answer = !dr.IsDBNull("password_answer") ? dr.GetString("password_answer") : null;
                    user.Is_approved = dr.GetBoolean("is_approved");
                    user.Fullname = dr.GetString("fullname");
                    user.Email = dr.GetString("email");
                    user.Tel = !dr.IsDBNull("tel") ? dr.GetString("tel") : null;
                    user.Last_login_date = dr.GetSmartDate("last_login_date", true);
                    user.Last_password_changed_date = dr.GetSmartDate("last_password_changed_date", true);
                    user.Last_lockout_date = dr.GetSmartDate("last_lockout_date", true);
                    user.Failed_password_attempt_count = dr.GetInt64("failed_password_attempt_count");
                    user.Failed_password_attempt_window_start = dr.GetSmartDate("failed_password_attempt_window_start", true);
                    user.Failed_password_answer_attempt_count = dr.GetInt64("failed_password_answer_attempt_count");
                    user.Failed_password_answer_attempt_window_start = dr.GetSmartDate("failed_password_answer_attempt_window_start", true);
                    user.Birthday = !dr.IsDBNull("birthday") ? dr.GetSmartDate("birthday", true) : null;
                    user.Address = !dr.IsDBNull("address") ? dr.GetString("address") : null;
                    user.Website = !dr.IsDBNull("website") ? dr.GetString("website") : null;
                    user.Avatar = !dr.IsDBNull("avatar") ? dr.GetString("avatar") : null;
                    user.Is_lock = dr.GetBoolean("is_lock");
                    user.User_type = (Int64?)dr.GetValue("user_type");
                    user.Last_modified = dr.GetSmartDate("last_modified", true);
                    user.Last_username = dr.GetString("Last_username");
                }
                dr.NextResult();
                while (dr.Read())
                {
                    string item = dr.GetInt64("id").ToString();
                    if (user.Roles == null)
                        user.Roles = new List<string>();
                    user.Roles.Add(item);
                }
            }
            return user;
        }

        /// <summary>
        /// Inserts a new User object in the database.
        /// </summary>
        /// <param name="user">The User DTO.</param>
        /// <returns>The new <see cref="UserDto"/>.</returns>
        public UserDto Insert(UserDto user)
        {
            user.Password_salt = StringUtils.CreateSalt();
            user.Password = StringUtils.Encode(user.Password, user.Password_salt);
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.User_Add", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", user.Id).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@user_name", user.User_name).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password", user.Password).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password_salt", user.Password_salt).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password_question", user.Password_question == null ? (object)DBNull.Value : user.Password_question).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password_answer", user.Password_answer == null ? (object)DBNull.Value : user.Password_answer).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@is_approved", user.Is_approved).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@fullname", user.Fullname).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@email", user.Email).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@tel", user.Tel == null ? (object)DBNull.Value : user.Tel).DbType = DbType.String;                    
                    cmd.Parameters.AddWithValue("@birthday", user.Birthday.DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@address", user.Address == null ? (object)DBNull.Value : user.Address).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@website", user.Website == null ? (object)DBNull.Value : user.Website).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@avatar", user.Avatar == null ? (object)DBNull.Value : user.Avatar).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@is_lock", user.Is_lock).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@user_type", user.User_type == null ? (object)DBNull.Value : user.User_type.Value).DbType = DbType.Int64;                    
                    cmd.Parameters.AddWithValue("@Last_username", user.Last_username).DbType = DbType.String;
                    cmd.ExecuteNonQuery();
                    user.Id = (long)cmd.Parameters["@id"].Value;
                }
            }
            return user;
        }

        /// <summary>
        /// Updates in the database all changes made to the User object.
        /// </summary>
        /// <param name="user">The User DTO.</param>
        /// <returns>The updated <see cref="UserDto"/>.</returns>
        public UserDto Update(UserDto user)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.User_Upd", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", user.Id).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@user_name", user.User_name).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password", user.Password).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password_salt", user.Password_salt).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password_question", user.Password_question == null ? (object)DBNull.Value : user.Password_question).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@password_answer", user.Password_answer == null ? (object)DBNull.Value : user.Password_answer).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@is_approved", user.Is_approved).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@fullname", user.Fullname).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@email", user.Email).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@tel", user.Tel == null ? (object)DBNull.Value : user.Tel).DbType = DbType.String;                    
                    cmd.Parameters.AddWithValue("@birthday", user.Birthday.DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@address", user.Address == null ? (object)DBNull.Value : user.Address).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@website", user.Website == null ? (object)DBNull.Value : user.Website).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@avatar", user.Avatar == null ? (object)DBNull.Value : user.Avatar).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@is_lock", user.Is_lock).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@user_type", user.User_type == null ? (object)DBNull.Value : user.User_type.Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Last_username", user.Last_username).DbType = DbType.String;
                    var rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected == 0)
                        throw new DataNotFoundException("User");
                }
            }
            return user;
        }

        /// <summary>
        /// Deletes the User object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        public void Delete(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.User_Delete", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int64;
                    var rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected == 0)
                        throw new DataNotFoundException("User");
                }
            }
        }
    }
}
